class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = lowerBound(nums,target);
        int last = upperBound(nums,target)-1;
        if(first<=last && first<nums.length && nums[first] == target){
            return new int[] {first,last};
        }
        return new int[] {-1,-1};
    }
    private int lowerBound(int[] nums,int target){
        int low = 0;
        int high = nums.length-1;
        int ans = nums.length;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid] >= target){
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
    private int upperBound(int[] nums,int target){
        int low = 0;
        int high = nums.length-1;
        int ans = nums.length;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid] > target){
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }

}
